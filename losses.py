import torch
from torch import tensor
import torch.nn as nn
from itertools import chain

import torchvision

class AngleLoss(nn.Module):

    def __init__(self):
        super(AngleLoss, self).__init__()

    def calculation_error(self,output,target):
        error = torch.acos((torch.dot(output,target))/(torch.norm(
            output)*torch.norm(target)))
        return error

    def forward(self, outputs, targets):
        outputs = outputs.view(-1,3)
        targets = targets.view(-1,3)
        # d = arccos(<o,t>/||o||||t||)
        data = list(zip(outputs,targets))
        loss = 0
        for output,target in data:
            loss += self.calculation_error(output,target)
        loss /= len(data)

        return loss


if __name__ == "__main__":
    from  itertools import chain
    outputs = [[[0.2208307683467865, -0.07138876616954803, 0.9697131514549255], [0.2209140658378601, -0.0715067982673645, 0.9695239067077637], [0.2209758460521698, -0.07146322727203369, 0.9694046378135681], [0.22090353071689606, -0.07129992544651031, 0.9693155288696289], [0.22082814574241638, -0.07106250524520874, 0.9692453145980835]]]
    # 
    #     [[0.21621717167064639,0.19047621894625918,0.9575849542942302],
    #     [0.2162010641522083,0.19083801668519412,0.957516554032939],
    #     [0.21549008832928146,0.1917042129076262,0.9575037945539986],
    #     [0.21547878232473153,0.1929996013651404,0.9572460750719993],
    #     [0.21547878232473153,0.1929996013651404,0.9572460750719993]],
    #     [[0.21621717167064639,0.19047621894625918,0.9575849542942302],
    #     [0.2162010641522083,0.19083801668519412,0.957516554032939],
    #     [0.21549008832928146,0.1917042129076262,0.9575037945539986],
    #     [0.21547878232473153,0.1929996013651404,0.9572460750719993],
    #     [0.21547878232473153,0.1929996013651404,0.9572460750719993]]
    #     ]
    targets = [[[0.2141071198922282,0.14681526527469044,0.9657139426837418],
[0.21020945363517057,0.1043767477778042,0.9720686601911059],
[0.20818693398386584,0.07021221490282281,0.9755657053201683],
[0.2008403476325279,0.01985692464951156,0.9794227163519891],
[0.1499437340003059,-0.0734837348299191,0.9859599471324845]]]
    # [
    #     [[0.21601863387030387,0.19299833227844454,0.957124648913895],
    #     [0.21760697189425648,0.19284153420306258,0.956796398649797],
    #     [0.21603570941374245,0.19261908409833725,0.957197190081134],
    #     [0.21613678341178508,0.19261451081193748,0.9571752927656904],
    #     [0.2161354498051421,0.19185654213134007,0.9573278093625684]],
    #     [[0.21601863387030387,0.19299833227844454,0.957124648913895],
    #     [0.21760697189425648,0.19284153420306258,0.956796398649797],
    #     [0.21603570941374245,0.19261908409833725,0.957197190081134],
    #     [0.21613678341178508,0.19261451081193748,0.9571752927656904],
    #     [0.2161354498051421,0.19185654213134007,0.9573278093625684]]
    #     ]
    # outputs = list(chain(*outputs))
    # targets = list(chain(*targets))
    critertion = AngleLoss()
    input = torch.randn(6,3, requires_grad=True)
    target = torch.randn(6,3)
    loss = critertion(input,target)
    loss.backward()
    # outputs = torch.FloatTensor(outputs)
    # targets = torch.FloatTensor(targets)
    # print(len(outputs),len(targets))
    print(loss)
    
    # print(torch.norm(torch.tensor([0.95772, 0.112233, 0.3441123])))
    # print(math.sqrt(sum([x*x for x in [0.95772, 0.112233, 0.3441123]])))
    
    
    # print()
